version: '3'

services:

  rabbitmq:
    image: rabbitmq:management
    ports:
      - 15672:15672
      - 5672:5672
    depends_on:
      - logspout

  cassandra:
    image: cassandra:3.11.11
    ports:
      - "7000:7000"
      - "9042:9042"
      - "9142:9142"
    environment:
      - http_proxy=${http_proxy-}
      - https_proxy=${https_proxy-}
      - no_proxy=${no_proxy-}
    volumes:
      - $GRIDSUITE_DATABASES/cassandra/data:/var/lib/cassandra:Z
      - ./technical/cassandra.jvm.options:/etc/cassandra/jvm.options:Z
      - ./technical/create-cassandra-databases.sh:/create-cassandra-databases.sh:Z
    restart:
      on-failure
    command: "bash /create-cassandra-databases.sh"

  postgres:
    build:
      context: ./technical
      dockerfile: Dockerfile-postgres
    ports:
      - "5432:5432"
    command: "bash init-databases.sh -c listen_addresses='*'"
    #command: -c 'config_file=/etc/postgresql/postgresql.conf'  -> set auto_explain.log_min_duration
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - PGDATA=/var/lib/postgresql/data
    env_file:
      - ./.env
      - ./$PROJECT_DIR_NAME/.env
    volumes:
      - $GRIDSUITE_DATABASES/postgres/data:/var/lib/postgresql/data:Z
      - $GRIDSUITE_DATABASES/init:/init-data:Z
      - ./technical/init-databases.sh:/init-databases.sh:Z
      - ./technical/init-geo-data.sh:/init-geo-data.sh:Z
      - ./technical/init-merging-data.sh:/init-merging-data.sh:Z
      - ./technical/create-postgres-databases.sh:/docker-entrypoint-initdb.d/create-postgres-databases.sh:Z
      #- ./postgres.conf:/etc/postgresql/postgresql.conf:Z
    restart:
      on-failure

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - discovery.type=single-node
      - LOGSPOUT=ignore
    volumes:
      - $GRIDSUITE_DATABASES/elasticsearch:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.3
    ports:
      - 5601:5601
    environment:
      - LOGSPOUT=ignore
    depends_on:
      - elasticsearch

  logstash:
    image: docker.elastic.co/logstash/logstash:7.9.3
    volumes:
      - ./technical/pipelines.yml:/config/pipelines.yml:Z
      - ./technical/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:Z
    environment:
      - LOGSPOUT=ignore
    depends_on:
      - elasticsearch

  socat:
    image: alpine/socat
    command: 'TCP-LISTEN:5000,reuseaddr,fork TCP:logstash:5000,forever,interval=5'

  logspout:
    image: gliderlabs/logspout:v3.2.13
    command: 'tcp://socat:5000?filter.name=grid*'
    environment:
      - LOGSPOUT=ignore
      - BACKLOG=false
      - "RAW_FORMAT={ \"container\": {{ toJSON .Container.Name }}, \"message\": {{ toJSON .Data }}, \"@timestamp\": {{ toJSON .Time }} }\n"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - socat



