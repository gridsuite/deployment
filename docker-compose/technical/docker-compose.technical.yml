version: '4.0'

services:

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - 15672:15672
      - 5672:5672
      - 15692:15692
    depends_on:
      logspout:
        condition: "service_started"
        required: false
    restart: unless-stopped

  postgres:
    build:
      context: $PWD/../technical
      dockerfile: Dockerfile-postgres
      args:
        - http_proxy=${http_proxy-}
        - https_proxy=${https_proxy-}
        - no_proxy=${no_proxy-}
    ports:
      - "5432:5432"
    command: "/init-databases.sh
              -c listen_addresses='*'
              -c shared_preload_libraries='auto_explain'
              -c auto_explain.log_min_duration=0
              -c jit=false
              -c enable_seqscan=false
              "
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_DEFAULT_DB=postgres
      - POSTGRES_PASSWORD=postgres
      - PGDATA=/var/lib/postgresql/data
    env_file:
      - $PWD/.env
    volumes:
      - $GRIDSUITE_DATABASES/postgres/data:/var/lib/postgresql/data:Z
      - $GRIDSUITE_DATABASES/init:/init-data:Z
      - $PWD/../technical/create-postgres-databases.sh:/create-postgres-databases.sh:Z
      - $PWD/../technical/init-databases.sh:/init-databases.sh:Z
      - $PWD/../technical/init-geo-data.sh:/init-geo-data.sh:Z
      - $PWD/../technical/init-merging-data.sh:/init-merging-data.sh:Z
      - $PWD/../technical/init-lines-catalog.sh:/init-lines-catalog.sh:Z
    restart: unless-stopped

  postgres-exporter:
    profiles:
      - all
      - metrics
    image: prometheuscommunity/postgres-exporter:v0.15.0
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_USER=postgres
      - DATA_SOURCE_PASS=postgres
      - DATA_SOURCE_URI=postgres:5432/postgres?sslmode=disable
    restart: unless-stopped
    depends_on:
      - postgres

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - discovery.type=single-node
      - LOGSPOUT=ignore
      - xpack.security.enabled=false
      - ingest.geoip.downloader.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - action.auto_create_index=filebeat-*
    volumes:
      - $GRIDSUITE_DATABASES/elasticsearch:/usr/share/elasticsearch/data
    restart: unless-stopped

  elasticsearch-exporter:
    profiles:
      - all
      - metrics
    image: prometheuscommunity/elasticsearch-exporter:v1.7.0
    command:
      - '--es.uri=http://elasticsearch:9200'
    ports:
      - "9114:9114"
    restart: unless-stopped
    depends_on:
      - elasticsearch

  kibana:
    profiles:
      - all
      - kibana
    image: docker.elastic.co/kibana/kibana:8.7.1
    ports:
      - 5601:5601
    environment:
      - LOGSPOUT=ignore
    depends_on:
      - elasticsearch
    restart: unless-stopped

  logstash:
    profiles:
      - all
      - kibana
    image: docker.elastic.co/logstash/logstash:8.7.1
    volumes:
      - $PWD/../technical/pipelines.yml:/config/pipelines.yml:Z
      - $PWD/../technical/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:Z
    environment:
      - LOGSPOUT=ignore
    depends_on:
      - elasticsearch
    restart: unless-stopped

  socat:
    profiles:
      - all
      - kibana
    image: alpine/socat
    command: 'TCP-LISTEN:5000,reuseaddr,fork TCP:logstash:5000,forever,interval=5'
    restart: unless-stopped

  logspout:
    profiles:
      - all
      - kibana
    image: gliderlabs/logspout:v3.2.13
    command: 'tcp://socat:5000?filter.name=grid*'
    environment:
      - LOGSPOUT=ignore
      - BACKLOG=false
      - "RAW_FORMAT={ \"container\": {{ toJSON .Container.Name }}, \"message\": {{ toJSON .Data }}, \"@timestamp\": {{ toJSON .Time }} }\n"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
    depends_on:
      - socat
    restart: unless-stopped

  pgadmin:
    profiles:
      - all
      - pgadmin
    image: dpage/pgadmin4:latest
    ports:
      - "12080:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@localhost.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    volumes:
      - $PWD/../technical/servers_pgadmin.json:/pgadmin4/servers.json
    restart: unless-stopped

  prometheus:
    profiles:
      - all
      - metrics
    image: prom/prometheus:v2.28.1
    command: --enable-feature=exemplar-storage
    volumes:
      - $PWD/../technical/prometheus.yml:/prometheus/prometheus.yml:ro
    restart: unless-stopped
    ports:
      - "8000:9090"

  grafana:
    profiles:
      - all
      - metrics
    image: grafana/grafana:10.2.2
    volumes:
      - $PWD/../technical/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - $PWD/../technical/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - $PWD/../technical/grafana/alerting:/etc/grafana/provisioning/alerting:ro
    restart: unless-stopped
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    ports:
      - "7000:3000"

  # accessible at http://localhost:9080/swagger/
  swagger-ui:
    #profiles: all
    image: swaggerapi/swagger-ui:latest
    build: ./technical/swagger
    restart: unless-stopped
    deploy:
      replicas: 1
      #restart_policy:
      #  condition: on-failure
      #  delay: 5s
      #  max_attempts: 3
      #  window: 20s
      resources:
        # use ~14MB RAM when tested
        limits:
          # we limit the number of worker processes nginx create
          cpus: '1'
          memory: 50M
        reservations:
          memory: 20M
    ports:
      - 9080:8080
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      NGINX_ENTRYPOINT_WORKER_PROCESSES_AUTOTUNE: true  # with deploy limits, will redduce the number of wrokers
      BASE_URL: /swagger
      #TRY_IT_OUT_ENABLED: true  #enable "Try it out" by default
      URLS_PRIMARY_NAME: gateway
      URLS: >
        [
        {"url":"https://github.com/elastic/elasticsearch-specification/raw/8.12/output/openapi/elasticsearch-serverless-openapi.json","name":"ElasticSearch API"},
        {"url":"https://github.com/elastic/kibana/raw/refs/tags/v8.7.1/x-pack/plugins/fleet/common/openapi/bundled.json","name":"Kibana plugin Fleet API"}
        ]
      # no spec found for:
      #   https://rawcdn.githack.com/rabbitmq/rabbitmq-server/v3.13.7/deps/rabbitmq_management/priv/www/api/index.html
      #   https://github.com/prometheus/prometheus/blob/main/docs/querying/api.md?plain=1
      #     https://prometheus.io/docs/prometheus/latest/querying/api/
      #   https://www.elastic.co/docs/api/doc/kibana
      #     WIP: https://github.com/elastic/kibana/issues/137240
